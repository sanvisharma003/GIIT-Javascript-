- It is used in object methods, where this refers to the object that the method is attached to, thus allowing the same method to be reused on different objects. this keyword refers to an object. we can always reuse 'this' object.
function details()
{
  document.write("the student is "+this.name+" the score is "+this.score);
}
var student1 = {
  name: "sanvi", 
  score: 95, 
  func: details
};
student1.func();

CALL()
- we can also use call() method that uses dynamism for calling the function of the object.
details.call(student1);

and if we dont pass any object, then it uses the glocal scope of 'this' keyword.
details.call(this);

APPLY()
- this is same as call(), but here, we can pass the arguments in form of an array.
function details(testscore)
{
  document.write("the student is "+this.name+" the score is "+this.score+" and the max score is "+testscore);
}
details.apply(student1,[30]);

BIND()
- bind() will return a function which will be assigned to an another variable. and then this variable can be used to invoke the function. 
var det1= details.bind(student1);
det1(10);
- if the method is bound to student1 and we call it using student2; then also as the method is bound to student1, it will display for the same.


